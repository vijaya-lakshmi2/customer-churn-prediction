
--------------------------------------
PART – A (Answer any 8 Questions)
--------------------------------------

1. Write short notes on computing devices and their uses.
Computing devices are electronic tools that process and store information using computational instructions. They range from large supercomputers to handheld smartphones. These devices are essential in every aspect of modern life—education, business, communication, and entertainment. For instance, computers are used for data analysis, mobile phones for communication and media, and smart devices for home automation.

2. Demonstrate the importance of algorithm with a suitable example.
An algorithm is a series of well-defined instructions to solve a problem. Algorithms help break complex problems into manageable steps and ensure correctness and efficiency.
Example: Algorithm to find the largest of two numbers:
1. Input two numbers a and b.
2. If a > b, then print a is larger.
3. Else print b is larger.

3. Write a Python program to accept student details and display using built-in functions.
```python
def display_student(name, roll):
    print("Student Name:", name)
    print("Roll Number:", roll)

name = input("Enter student name: ")
roll = input("Enter roll number: ")
display_student(name, roll)
```

4. Discuss with an example the scope and lifetime of a variable.
Variable scope determines where a variable is accessible. Variables inside functions are local, outside are global. Lifetime is the time duration the variable exists during program execution.
```python
x = 10  # Global

def test():
    y = 5  # Local
    print("x:", x)
    print("y:", y)

test()
# y is not accessible outside
```

5. Write a Python program to demonstrate function with “return” statement.
```python
def square(n):
    return n * n

result = square(4)
print("Square:", result)
```

6. Why use a module? How to structure a program?
Modules are reusable files with functions or variables. They organize large programs and promote code reuse.
Structure:
- Import necessary modules.
- Define functions/classes.
- Use main() method to run.

7. Write a short note on dictionary data type in Python.
Dictionaries are key-value pairs. Keys must be unique and immutable.
```python
student = {"name": "Alice", "age": 21}
print(student["name"])
```

8. What are tuples? How to access the elements from tuples?
Tuples are ordered, immutable collections.
```python
t = (1, 2, 3)
print(t[0])  # Output: 1
```

9. How to handle multiple exceptions with examples?
Use multiple except blocks to catch different errors.
```python
try:
    x = int(input("Enter number: "))
    print(10 / x)
except ZeroDivisionError:
    print("Cannot divide by zero")
except ValueError:
    print("Invalid input")
```

10. How to declare a constructor method in Python? Explain.
A constructor is `__init__()` method in Python. It initializes object properties.
```python
class Person:
    def __init__(self, name):
        self.name = name
```

11. Define class. How to convert a class object into a floating type value?
A class is a blueprint for creating objects.
```python
class Number:
    def __init__(self, val):
        self.val = val

    def __float__(self):
        return float(self.val)

n = Number("12.34")
print(float(n))
```

12. Define polymorphism with proper example.
Polymorphism allows the same method name to behave differently in different classes.
```python
class Cat:
    def sound(self):
        print("Meow")

class Dog:
    def sound(self):
        print("Bark")

for animal in (Cat(), Dog()):
    animal.sound()
```

--------------------------------------
PART – B (Answer all Questions)
--------------------------------------

13(a) Algorithm, Flowchart and Code to Check Leap Year
Algorithm:
1. Input year
2. If year % 400 == 0 → Leap
3. Else if year % 100 == 0 → Not Leap
4. Else if year % 4 == 0 → Leap
5. Else → Not Leap

Python Code:
```python
year = int(input("Enter year: "))
if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):
    print("Leap Year")
else:
    print("Not a Leap Year")
```

13(b) (i) Python Assignment Operators:
=, +=, -=, *=, /=, //=, %=, **=

(ii) Iteration statements:
```python
# for loop
for i in range(5):
    print(i)

# while loop
i = 0
while i < 5:
    print(i)
    i += 1
```

14(a) Argument Types and Example:
- Positional
- Default
- Keyword
- Variable-length
```python
def greet(name, msg="Hello"):
    print(msg, name)

greet("Alice")
greet("Bob", "Hi")
```

14(b) Python Code to Sort Words Alphabetically
```python
text = input("Enter text: ")
words = text.split()
words.sort()
print("Sorted words:", words)
```

15(a) Define Module and Import Types:
Module: File with reusable functions/classes.
Import types:
- `import math`
- `from math import sqrt`
Use specific imports for memory efficiency.

15(b) Exception and User-defined Exception:
```python
class NegativeNumberError(Exception):
    pass

num = int(input("Enter number: "))
if num < 0:
    raise NegativeNumberError("Negative not allowed")
```

16(a) Hierarchical Inheritance:
```python
class Animal:
    def speak(self):
        print("Animal sound")

class Dog(Animal):
    def bark(self):
        print("Barks")

class Cat(Animal):
    def meow(self):
        print("Meows")

d = Dog()
d.speak()
d.bark()
```

16(b) Method Overriding in Python:
```python
class A:
    def show(self):
        print("Class A")

class B(A):
    def show(self):
        print("Class B")

obj = B()
obj.show()  # Overrides A's method
```

--------------------------------------
